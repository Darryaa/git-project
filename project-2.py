#!/usr/bin/env python
# coding: utf-8

# ## –®–∞–≥ 1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö

# In[1]:


get_ipython().system('pip install shap ')


# In[2]:


get_ipython().system(' pip install phik==0.10.0')


# In[3]:


import pandas as pd
import numpy as np
import math
import matplotlib.pyplot as plt
plt.rcParams["figure.figsize"] = (5,5)
from pylab import rcParams
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import recall_score

from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.model_selection import RandomizedSearchCV
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import roc_auc_score
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import GridSearchCV
from sklearn.preprocessing import RobustScaler
from sklearn.impute import SimpleImputer

from sklearn.preprocessing import (
    OneHotEncoder,
    OrdinalEncoder, 
    StandardScaler, 
    MinMaxScaler,
    RobustScaler)


# In[4]:


import phik
from phik.report import plot_correlation_matrix
from phik import report
import shap


# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞—Ç–∞—Å–µ—Ç—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –∫–ª–∞—Å—Å—ã –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–ø—É—Å–∫–∏

# In[5]:


market = pd.read_csv("/datasets/market_file.csv")
money = pd.read_csv("/datasets/market_money.csv")
time = pd.read_csv("/datasets/market_time.csv")
profit = pd.read_csv("/datasets/money.csv",delimiter=";", decimal=",")


# In[6]:


market.head()


# In[7]:


profit.head()


# –ó–∞–º–µ—á–∞–µ–º –∞–Ω–æ–º–∞–ª—å–Ω–æ –Ω–∏–∑–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –ü—Ä–∏–±—ã–ª–∏ –≤ profit. C–∫–æ—Ä—Ä–µ –≤—Å–µ–≥–æ –≤ –∑–Ω–∞—á–µ–Ω–∏—è—Ö –Ω–µ —Ö–≤–∞—Ç–µ—Ç 2 –Ω—É–ª–µ–π. –ò—Å–ø—Ä–∞–≤–∏–º –æ—à–∏–±–∫—É.

# In[8]:


profit["–ü—Ä–∏–±—ã–ª—å"] = profit["–ü—Ä–∏–±—ã–ª—å"] * 1000
len(profit)


# In[9]:


profit


# In[10]:


market.info()


# In[11]:


for a in [market,money,time,profit]:
    a.info()


# In[12]:


for a in [market,money,time,profit]:
    print(a.isna().sum())


# –§–∏–∫—Å–∏—Ä—É–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤, –∫–ª–∞—Å—Å—ã –¥–∞–Ω–Ω—ã—Ö —Ç–æ–∂–µ –≤ –ø–æ—Ä—è–¥–∫–µ, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ.

# ## –®–∞–≥ 2. –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö

# In[13]:


non_str = market.select_dtypes(include=['int64','float64'])
non_str.info()


# In[14]:


str_v = market.select_dtypes(exclude=['int64','float64'])


# In[15]:


cols_list = non_str.columns.tolist()


# In[16]:


for a in str_v:
            b = market.pivot_table(index=[a],values="id",aggfunc="count")
            plt.figure()
            plt.title(a,loc='right')
            plt.pie(b["id"], labels=market[a].unique(), autopct='%.2f')
            plt.show


# <span style="color: blue; font-weight: bold">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ 3: </span> ‚úîÔ∏è\
# <span style="color: green"> üëç</span>

# In[17]:


a = market.drop("id",axis=1).hist(figsize=(15,7));


# In[18]:


for b in non_str.drop("id",axis=1):
    plt.figure();
    plt.title(b)
    market[b].hist(figsize=(7,3));
    plt.xlabel("–∑–Ω–∞—á–µ–Ω–∏—è");
    plt.ylabel("–∫–ª–∏–µ–Ω—Ç—ã");

    


# In[19]:


for a in [money,time,profit]:
    a.drop("id",axis=1).hist()
    plt.xlabel("–∑–Ω–∞—á–µ–Ω–∏–µ")
    plt.ylabel("–∫–ª–∏–µ–Ω—Ç—ã")


# –°—Ç—Ä–æ–∏–º –≥–∏—Å—Ç–æ—Ä–∞–º–º—ã, –∑–∞–º–µ—á–∞–µ–º –∞–Ω–æ–º–∞–ª–∏–∏ –≤ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤—ã—Ä—É—á–∫–∞ –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ money: –Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–∫–æ—Ç–æ—Ä—ã–µ –ø–æ —Ç–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–¥–∞–ª–∏—Ç—å –∏ –≤–±—Ä–æ—Å –≤ 100.000). –£–¥–∞–ª–∏–º –∏—Ö –ø–æ–∑–∂–µ –ø–æ—Å–ª–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –¥–∞—Ç–∞—Å–µ—Ç–æ–≤. –¢–∞–∫–∂–µ –∑–∞–º–µ—á–∞–µ–º –æ—à–∏–±–∫—É –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –ø—Ä–∏–∑–Ω–∞–∫–µ —Ç–∏–ø —Å–µ—Ä–≤–∏—Å–∞, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –µ–µ. –ü—Ä–æ–≤–µ—Ä—è–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –¥–∞—Ç–∞—Å–µ—Ç–∞—Ö.

# In[20]:


for a in [market,money,time]:
    b = a.select_dtypes(exclude=['int64','float64'])
    for c in b.columns:
        print(a[c].unique())


# In[21]:


market['–¢–∏–ø —Å–µ—Ä–≤–∏—Å–∞'] = market['–¢–∏–ø —Å–µ—Ä–≤–∏—Å–∞'].replace('—Å—Ç–∞–Ω–¥–∞—Ä—Ç—Ç', '—Å—Ç–∞–Ω–¥–∞—Ä—Ç') 


# In[22]:


market['–¢–∏–ø —Å–µ—Ä–≤–∏—Å–∞'].unique()


# In[23]:


time["–ü–µ—Ä–∏–æ–¥"] = time["–ü–µ—Ä–∏–æ–¥"].replace('–ø—Ä–µ–¥—ã–¥—Ü—â–∏–π_–º–µ—Å—è—Ü', '–ø—Ä–µ–¥—ã–¥—É—â–∏–π_–º–µ—Å—è—Ü') 


# In[24]:


time["–ü–µ—Ä–∏–æ–¥"].unique()


# –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º —á—Ç–æ–±—ã –≤ –∏—Ç–æ–≥–æ–≤–æ–º –¥–∞—Ç–∞—Å–µ—Ç–µ –±—ã–ª–∏ —Å—Ç–æ–ª–±—Ü—ã –ø–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º –≤—ã—Ä—É—á–∫–∏/–º–∏–Ω—É—Ç –ø–æ –º–µ—Å—è—Ü–∞–º

# In[25]:


money1 = money.query("–ü–µ—Ä–∏–æ–¥ == '—Ç–µ–∫—É—â–∏–π_–º–µ—Å—è—Ü'")
money2 = money.query("–ü–µ—Ä–∏–æ–¥ == '–ø—Ä–µ–¥—ã–¥—É—â–∏–π_–º–µ—Å—è—Ü'")
money3 = money.query("–ü–µ—Ä–∏–æ–¥ == '–ø—Ä–µ–ø—Ä–µ–¥—ã–¥—É—â–∏–π_–º–µ—Å—è—Ü'")


# In[26]:


market = market.merge(money1,on="id")


# In[27]:


market.rename(columns={"–í—ã—Ä—É—á–∫–∞": "–í—ã—Ä—É—á–∫–∞_—Ç–µ–∫—É—â–∏–π_–º–µ—Å—è—Ü"},inplace=True)
market = market.drop("–ü–µ—Ä–∏–æ–¥",axis=1)


# In[28]:


market = market.merge(money2,on="id")
market.rename(columns={"–í—ã—Ä—É—á–∫–∞": "–í—ã—Ä—É—á–∫–∞_–ø—Ä–µ–¥—ã–¥—É—â–∏–π_–º–µ—Å—è—Ü"},inplace=True)
market = market.drop("–ü–µ—Ä–∏–æ–¥",axis=1)


# In[29]:


market = market.merge(money3,on="id")
market.rename(columns={"–í—ã—Ä—É—á–∫–∞": "–í—ã—Ä—É—á–∫–∞_–ø—Ä–µ–ø—Ä–µ–¥—ã–¥—É—â–∏–π_–º–µ—Å—è—Ü"},inplace=True)
market = market.drop("–ü–µ—Ä–∏–æ–¥",axis=1)


# In[30]:


market.info()


# In[31]:


time1 = time.query("–ü–µ—Ä–∏–æ–¥ == '—Ç–µ–∫—É—â–∏–π_–º–µ—Å—è—Ü'")
time2 = time.query("–ü–µ—Ä–∏–æ–¥ == '–ø—Ä–µ–¥—ã–¥—É—â–∏–π_–º–µ—Å—è—Ü'")


# In[32]:


market = market.merge(time1,on="id")
market.rename(columns={"–º–∏–Ω—É—Ç": "–ú–∏–Ω—É—Ç—ã_—Ç–µ–∫—É—â–∏–π_–º–µ—Å—è—Ü"},inplace=True)


# In[33]:


market = market.merge(time2,on="id")
market.rename(columns={"–º–∏–Ω—É—Ç": "–ú–∏–Ω—É—Ç—ã_–ø—Ä–µ–¥—ã–¥—É—â–∏–π_–º–µ—Å—è—Ü"},inplace=True)


# In[34]:


market.head(20)
market = market.drop(["–ü–µ—Ä–∏–æ–¥_y","–ü–µ—Ä–∏–æ–¥_x"],axis=1)


# In[35]:


market.head()


# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç–∞—Å–µ—Ç –ø–æ—Å–ª–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–∞ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–ø—É—Å–∫–∏.

# In[36]:


market.info()


# In[37]:


market.isna().sum()


# –¢–µ–ø–µ—Ä—å –∏–∑–±–∞–≤–ª—è–µ–º—Å—è –æ—Ç id, —Å –Ω—É–ª–µ–≤—ã–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏ –≤—ã—Ä—É—á–∫–∏ –∏ –≤–±—Ä–æ—Å –≤ 100.000

# In[38]:


u = market.query("–í—ã—Ä—É—á–∫–∞_–ø—Ä–µ–ø—Ä–µ–¥—ã–¥—É—â–∏–π_–º–µ—Å—è—Ü == 0")


# In[39]:


for a in u["id"].unique():
    market = market.drop(market[market["id"]==a].index)


# In[40]:


u1 = market.query("–í—ã—Ä—É—á–∫–∞_—Ç–µ–∫—É—â–∏–π_–º–µ—Å—è—Ü > 20000")


# In[41]:


for a in u1["id"].unique():
    market = market.drop(market[market["id"]==a].index)


# In[42]:


market.drop("id",axis=1).hist(figsize=(20,10));


# ## –®–∞–≥ 3. –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π

# –ö–æ–¥–∏—Ä—É–µ–º —Ü–µ–ª–µ–≤–æ–π –ø—Ä–∏–∑–Ω–∞–∫ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é, –∏–∑–±–∞–≤–ª—è–µ–º—Å—è –æ—Ç –Ω–µ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–≥–æ id

# In[43]:


market.info()


# In[44]:


market.set_index("id",inplace=True)


# In[45]:


market


# In[46]:


phik_overview = market.phik_matrix()

plot_correlation_matrix(
    phik_overview.values,
    x_labels=phik_overview.columns,
    y_labels=phik_overview.index,
    title=r"correlation $\phi_K$",
    fontsize_factor=1.5,
    figsize=(15, 12)
)


# –£ —Ç–∞—Ä–≥–µ—Ç–∞ –Ω–∞–∏–±–æ–ª—å—à–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏ C—Ç—Ä–∞–Ω–∏—Ü_–∑–∞_–≤–∏–∑–∏—Ç (0.75), –ê–∫—Ü–∏–æ–Ω–Ω—ã–µ_–ø–æ–∫—É–ø–∫–∏(0.51) –ú–∞—Ä–∫–µ—Ç_–∞–∫—Ç–∏–≤_6_–º–µ—Å (0.54), –ú–∏–Ω—É—Ç_–ø—Ä–µ–¥—ã–¥—É—â–∏–π_–º–µ—Å—è—Ü (0.52), –ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ_–ø—Ä–æ–¥—É–∫—Ç—ã (0.51),–ú–∏–Ω—É—Ç_—Ç–µ–∫—É—â–∏–π_–º–µ—Å—è—Ü (0.58), –°—Ä–µ–¥–Ω–∏–π_–ø—Ä–æ—Å–º–æ—Ç—Ä_–∫–∞—Ç–µ–≥–æ—Ä–∏–π_–∑–∞_–≤–∏–∑–∏—Ç (0.54), –í—ã—Ä—É—á–∫–∞_–ø—Ä–µ–ø—Ä–µ–¥—ã–¥—É—â–∏–π_–º–µ—Å—è—Ü(0.69). –ù—É–ª–µ–≤–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å —Ç–∞—Ä–≥–µ—Ç–æ–º —É –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Ä–∞–∑—Ä–µ—à–∏—Ç—å —Å–æ–æ–±—â–∞—Ç—å –∏ –º–∞—Ä–∫–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü.
# 
# –¢–∞–∫–∂–µ —Å—Ç–æ–∏—Ç –æ—Ç–º–µ—Ç–∏—Ç—å —Å–∏–ª—å–Ω—É—é –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é –º–µ–∂–¥—É –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏ –í—ã—Ä—É—á–∫–∞_—Ç–µ–∫—É—â–∏–π_–º–µ—Å—è—Ü –∏ –í—ã—Ä—É—á–∫–∞_–ø—Ä–µ–¥—ã–¥—É—â–∏–π_–º–µ—Å—è—Ü.

# –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø–æ –≥—Ä—É–ø–ø–∞–º (–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è, –ø—Ä–æ–¥—É–∫—Ç, –ø–æ–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ —Å–∞–π—Ç–µ, –≤—ã—Ä—É—á–∫–∞ (—Åom,product,site, revenue) –∏ –ø—Ä–æ–≤–µ—Ä—è–º, –∫–∞–∫–∞—è —Å–∏–ª—å–Ω–µ–µ –≤—Å–µ–≥–æ –∫–æ—Ä—Ä–µ–ª–∏—Ä—É–µ—Ç —Å —Ç–∞—Ä–≥–µ—Ç–æ–º:

# In[47]:


com = market[["–ü–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å","–¢–∏–ø —Å–µ—Ä–≤–∏—Å–∞","–†–∞–∑—Ä–µ—à–∏—Ç—å —Å–æ–æ–±—â–∞—Ç—å","–ú–∞—Ä–∫–µ—Ç_–∞–∫—Ç–∏–≤_6_–º–µ—Å","–ú–∞—Ä–∫–µ—Ç_–∞–∫—Ç–∏–≤_—Ç–µ–∫_–º–µ—Å","–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"]]
product=market[["–ü–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å","–ê–∫—Ü–∏–æ–Ω–Ω—ã–µ_–ø–æ–∫—É–ø–∫–∏","–ü–æ–ø—É–ª—è—Ä–Ω–∞—è_–∫–∞—Ç–µ–≥–æ—Ä–∏—è","–°—Ä–µ–¥–Ω–∏–π_–ø—Ä–æ—Å–º–æ—Ç—Ä_–∫–∞—Ç–µ–≥–æ—Ä–∏–π_–∑–∞_–≤–∏–∑–∏—Ç","–ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ_–ø—Ä–æ–¥—É–∫—Ç—ã_—à—Ç—É–∫_–∫–≤–∞—Ä—Ç–∞–ª"]]
site = market[["–ü–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å","–ú–∏–Ω—É—Ç—ã_–ø—Ä–µ–¥—ã–¥—É—â–∏–π_–º–µ—Å—è—Ü","–ú–∏–Ω—É—Ç—ã_—Ç–µ–∫—É—â–∏–π_–º–µ—Å—è—Ü","–°—Ç—Ä–∞–Ω–∏—Ü_–∑–∞_–≤–∏–∑–∏—Ç","–û—à–∏–±–∫–∞_—Å–µ—Ä–≤–∏—Å–∞"]]
revenue = market[["–ü–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å","–í—ã—Ä—É—á–∫–∞_–ø—Ä–µ–¥—ã–¥—É—â–∏–π_–º–µ—Å—è—Ü","–í—ã—Ä—É—á–∫–∞_–ø—Ä–µ–ø—Ä–µ–¥—ã–¥—É—â–∏–π_–º–µ—Å—è—Ü","–í—ã—Ä—É—á–∫–∞_—Ç–µ–∫—É—â–∏–π_–º–µ—Å—è—Ü"]]


# In[48]:


for a in [com,product,site,revenue]:
    for b in ["–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º","–ü—Ä–æ–¥—É–∫—Ç–æ–≤–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ","–ü–æ–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ —Å–∞–π—Ç–µ","–í—ã—Ä—á–∫–∞"]:
        pp = sns.pairplot(a,hue="–ü–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å");
        pp.fig.suptitle(b, y=1.08)
        plt.show()


# –ó–∞–º–µ—á–∞–µ–º –Ω–∞–∏–±–æ–ª—å—à—É—é –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é —É –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, c–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º –Ω–∞ —Å–∞–π—Ç–µ

# In[49]:


market.head()


# ## –®–∞–≥ 4. –ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ

# –í —Ä–∞–º–∫–∞—Ö –∞–Ω–∞–ª–∏–∑–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π –º—ã –≤—ã—è–≤–∏–ª–∏ –¥–≤–∞ –ø—Ä–∏–∑–Ω–∞–∫–∞ —Å –Ω—É–ª–µ–≤–æ–π –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–µ–π —Å —Ç–∞—Ä–≥–µ—Ç–æ–º, —É–¥–∞–ª—è–µ–º –∏—Ö –ø–µ—Ä–µ–¥ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–æ–π –¥–∞–Ω–Ω—ã—Ö –∫ –º–æ–¥–µ–ª–∏ –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–π —à—É–º–∞.

# In[50]:


RANDOM_STATE = 42
TEST_SIZE = 0.25
y = market[['–ü–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å']]
X = market.drop(['–ü–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å','–†–∞–∑—Ä–µ—à–∏—Ç—å —Å–æ–æ–±—â–∞—Ç—å','–ú–∞—Ä–∫–µ—Ç_–∞–∫—Ç–∏–≤_—Ç–µ–∫_–º–µ—Å'], axis=1)
y['–ü–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'] = y['–ü–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'].apply(lambda x: 1 if x == '–°–Ω–∏–∑–∏–ª–∞—Å—å' else 0)
scoring = "recall"


# In[51]:


X_train, X_test, y_train, y_test = train_test_split(
    X,y,
    test_size = TEST_SIZE,
    random_state = RANDOM_STATE,
    stratify = market['–ü–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å']
)


# In[52]:


ord_columns = ['–¢–∏–ø —Å–µ—Ä–≤–∏—Å–∞']
ohe_columns = ['–ü–æ–ø—É–ª—è—Ä–Ω–∞—è_–∫–∞—Ç–µ–≥–æ—Ä–∏—è']

num_columns = ['–ú–∞—Ä–∫–µ—Ç_–∞–∫—Ç–∏–≤_6_–º–µ—Å','–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å','–ê–∫—Ü–∏–æ–Ω–Ω—ã–µ_–ø–æ–∫—É–ø–∫–∏','–°—Ä–µ–¥–Ω–∏–π_–ø—Ä–æ—Å–º–æ—Ç—Ä_–∫–∞—Ç–µ–≥–æ—Ä–∏–π_–∑–∞_–≤–∏–∑–∏—Ç','–ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ_–ø—Ä–æ–¥—É–∫—Ç—ã_—à—Ç—É–∫_–∫–≤–∞—Ä—Ç–∞–ª','–û—à–∏–±–∫–∞_—Å–µ—Ä–≤–∏—Å–∞','–°—Ç—Ä–∞–Ω–∏—Ü_–∑–∞_–≤–∏–∑–∏—Ç','–í—ã—Ä—É—á–∫–∞_—Ç–µ–∫—É—â–∏–π_–º–µ—Å—è—Ü','–í—ã—Ä—É—á–∫–∞_–ø—Ä–µ–¥—ã–¥—É—â–∏–π_–º–µ—Å—è—Ü','–í—ã—Ä—É—á–∫–∞_–ø—Ä–µ–ø—Ä–µ–¥—ã–¥—É—â–∏–π_–º–µ—Å—è—Ü','–ú–∏–Ω—É—Ç—ã_—Ç–µ–∫—É—â–∏–π_–º–µ—Å—è—Ü','–ú–∏–Ω—É—Ç—ã_–ø—Ä–µ–¥—ã–¥—É—â–∏–π_–º–µ—Å—è—Ü'] 
ohe_pipe = Pipeline(
    [
        (
            'simpleImputer_ohe', 
            SimpleImputer(missing_values=np.nan, strategy='most_frequent')
        ),
        (
            'ohe', 
            OneHotEncoder(drop='first', handle_unknown='error', sparse=False)
        )
    ]
)

ord_pipe = Pipeline(
    [
        (
            'simpleImputer_before_ord', 
            SimpleImputer(missing_values=np.nan, strategy='most_frequent')
        ),
        (
            'ord',
            OrdinalEncoder(
                handle_unknown='use_encoded_value',
                unknown_value=np.nan
            )
        ),
        (
            'simpleImputer_after_ord', 
            SimpleImputer(missing_values=np.nan, strategy='most_frequent')
        )
    ])


data_preprocessor = ColumnTransformer(
    [
        ('ohe', ohe_pipe, ohe_columns),
        ('ord', ord_pipe, ord_columns),
        ('num', MinMaxScaler(), num_columns)
    ], 
    remainder='passthrough'
)


pipe_final= Pipeline(
    [
        ('preprocessor', data_preprocessor),
        ('models', DecisionTreeClassifier(random_state=RANDOM_STATE))
    ]
)


param_grid = [
       {
        'models': [DecisionTreeClassifier(random_state=RANDOM_STATE)],
        'models__max_depth': range(2, 5),
        'models__max_features': range(2,5),
        'preprocessor__num': [StandardScaler(), MinMaxScaler(), 'passthrough']  
    },
    
    {
        'models': [KNeighborsClassifier()],
        'models__n_neighbors': range(2,5),
        'preprocessor__num': [StandardScaler(), MinMaxScaler(), 'passthrough']   
    },

    {
        'models': [LogisticRegression(
            random_state=RANDOM_STATE, 
            solver='liblinear', 
            penalty='l1'
        )],
        'models__C': range(1,5),
        'preprocessor__num': [StandardScaler(), MinMaxScaler(), 'passthrough']  
    },

 
     {
        'models': [SVC(probability=True,random_state=RANDOM_STATE)],
            'C':range(0,1), 
            'degree':range(3,4),
            'kernel': ['rbf'],

        'preprocessor__num': [StandardScaler(), MinMaxScaler(), 'passthrough']  
    }
]

randomized_search = RandomizedSearchCV(
    pipe_final, 
    param_grid, 
    cv=5,
    scoring="recall",
    random_state=RANDOM_STATE,
    n_jobs=-1
)
randomized_search.fit(X_train, y_train)

print('–õ—É—á—à–∞—è –º–æ–¥–µ–ª—å –∏ –µ—ë –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n\n', randomized_search.best_estimator_)
print ('–ú–µ—Ç—Ä–∏–∫–∞ –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–π –≤—ã–±–æ—Ä–∫–µ:', randomized_search.best_score_)

y_test_pred = randomized_search.predict(X_test)
print(f'–ú–µ—Ç—Ä–∏–∫–∞ recall –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ: {recall_score(y_test, y_test_pred)}')


# In[53]:


prepros= Pipeline(
    [('preprocessor', data_preprocessor)])


# In[54]:


X_train_trans = prepros.fit_transform(X_train)


# In[55]:


X_test_trans = prepros.transform(X_test)


# In[56]:


model = LogisticRegression(C=3, penalty='l1', random_state=42, solver='liblinear')


# In[57]:


model = model.fit(X_train_trans,y_train)


# In[58]:


pred = model.predict(X_test_trans)


# In[59]:


recall_score(y_test,pred)


# –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è shap.explainer

# In[60]:


new_col = prepros.named_steps['preprocessor'].named_transformers_['ohe'].named_steps['ohe'].get_feature_names()
new_cols = np.concatenate([new_col,ord_columns,num_columns])


# In[61]:


new_cols


# In[62]:


pd.set_option('display.max_colwidth', None)


# In[63]:


models_result = pd.concat([pd.DataFrame(randomized_search.cv_results_["params"]),pd.DataFrame(randomized_search.cv_results_["mean_test_score"], columns=["recall"])],axis=1)


# In[64]:


models_result


# In[65]:


proba = model.predict_proba(X_test_trans)
probabilities_one = proba[:, 1]
print('–ü–ª–æ—â–∞–¥—å ROC-–∫—Ä–∏–≤–æ–π:', roc_auc_score(y_test, probabilities_one))


# In[66]:


market.head()


# In[67]:


explainer = shap.LinearExplainer(model,X_train_trans,feature_names=new_cols)
shap_values = explainer(X_train_trans)

shap.plots.beeswarm(shap_values) 


# –°—Ç—Ä–∞–Ω–∏—Ü_–∑–∞_–≤–∏–∑–∏—Ç, –°—Ä–µ–¥–Ω–∏–π_–ø—Ä–æ—Å–º–æ—Ç—Ä_–∫–∞—Ç–µ–≥–æ—Ä–∏–π_–∑–∞_–≤–∏–∑–∏—Ç, –ú–∏–Ω—É—Ç—ã_–ø—Ä–µ–¥—ã–¥—É—â–∏–π_–º–µ—Å—è—Ü, –ú–∏–Ω—É—Ç—ã_—Ç–µ–∫—É—â–∏–π_–º–µ—Å—è—Ü, –ú–∞—Ä–∫–µ—Ç_–∞–∫—Ç–∏–≤_6_–º–µ—Å, –í—ã—Ä—É—á–∫–∞_–ø—Ä–µ–¥—ã–¥—É—â–∏–π_–º–µ—Å—è—Ü - —á–µ–º –≤—ã—à–µ —ç—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–∏, —Ç–µ–º –±–æ–ª—å—à–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞ 1. –û–±—Ä–∞—Ç–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å —É –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ_–ø—Ä–æ–¥—É–∫—Ç—ã_—à—Ç—É–∫_–∫–≤–∞—Ä—Ç–∞–ª,–ê–∫—Ü–∏–æ–Ω–Ω—ã–µ_–ø–æ–∫—É–ø–∫–∏ - –≤—ã—Å–æ–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —ç—Ç–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –æ–∑–Ω–∞—á–∞–µ—Ç –≤—ã—Å–æ–∫—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –∫ –∫–ª–∞—Å—Å—É 0. –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ú–µ–ª–∫–∞—è –±—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ –∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ –ø–æ–≤—ã—à–∞–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞ 1. –£–≤–µ—Ä–µ–Ω–Ω–µ –≤—Å–µ–≥–æ –º–æ–¥–µ–ª—å –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç –∫–ª–∞—Å—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ê–∫—Ü–∏–æ–Ω–Ω—ã–µ_–ø–æ–∫—É–ø–∫–∏, –ú–∞—Ä–∫–µ—Ç_–∞–∫—Ç–∏–≤_6_–º–µ—Å, –í—ã—Ä—É—á–∫–∞_–ø—Ä–µ–¥—ã–¥—É—â–∏–π_–º–µ—Å—è—Ü	

# ## –®–∞–≥ 5  –ê–Ω–∞–ª–∏–∑ —Å–µ–≥–º–µ–Ω—Ç–∞

# –ë—É–¥–µ–º –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –≤—ã—Å–æ–∫–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é —Å–Ω–∏–∂–µ–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –Ω–∞–∏–±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–π –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å—é.

# –û–ø–∏—Å—ã–≤–∞—é —Å–≤–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–µ–π—Å—Ç–≤–∏–π:
#    1. –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –Ω—É–ª–µ–≤—ã–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–º –ø—Ä–∏–±—ã–ª–∏ –∏–∑ –¥–∞—Å–µ—Ç–∞ profit.
#    2. –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–±—ã–ª—å –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞ profit –≤ –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç market, –æ–±—ä–µ–¥–∏–Ω—è—è –¥–≤–∞ –¥–∞—Ç–µ—Å–µ—Ç–∞.
#    3. –î–µ–ª–∏–º –¥–∞—Ç–∞—Å–µ—Ç –Ω–∞ –¥–≤–∞ —Ä–∞–≤–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–∞ –ø–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—é –ø—Ä–∏–±—ã–ª–∏. 
#    4. –°–æ–∑–¥–∞–µ–º –¥–∞—Ç–∞—Å–µ—Ç high_profit —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ —Å –≤—ã—Ä—É—á–∫–æ–π –±–æ–ª—å—à–µ, —á–µ–º —É 50% –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤. –ò—Ö –≤ —Ä–∞–º–∫–∞—Ö –∑–∞–¥–∞—á–∏ –æ–ø—Ä–µ–¥–µ–ª–µ—è–º –∫–∞–∫ —Å–µ–≥–º–µ–Ω—Ç —Å –Ω–∞–∏–±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–π –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å—é.
#    5. –¢–µ–ø–µ—Ä—å —Å–µ–≥–º–µ–Ω—Ç–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –≤—ã—Å–æ–∫–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é —Å–Ω–∏–∂–µ–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –¥–ª—è —ç—Ç–æ–≥–æ —Å–º–æ—Ç—Ä–∏–º –Ω–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏ –æ—Ç–±–∏—Ä–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –±–æ–ª—å—à–µ 0.8. –°–æ–∑–Ω–∞–¥–µ–º –¥–∞—Ç–∞—Å–µ—Ç churn
#    6. –û–±—ä–µ–¥–∏–Ω—è–µ–º churn c high_profit, –ø–æ–ª—É—á–∞—è —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º —Å–µ–≥–º–µ–Ω—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –≤—ã—Å–æ–∫–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é —Å–Ω–∏–∂–µ–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –Ω–∞–∏–±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–π –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å—é - churn_table
#    7. –î–ª—è –ª—É—á—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —ç—Ç–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–¥–∏–º —Ç–∞–∫–∂–µ —Å–µ–≥–º–µ–Ω—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π —Å –≤—ã—Å–æ–∫–æ–π –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å—é –∏ –Ω–∏–∑–∫–æ–π –≤–µ—Ä–æ—è–Ω–æ—Å—Ç—å—é —Å–Ω–∏–∂–µ–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (0.1 –∏ –Ω–∏–∂–µ), —Ç–∞–∫–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–∏—è–µ–º –≤ retain_table.
#    8. –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±–∞ —Å–µ–≥–º–µ–Ω—Ç–∞.
#    

# In[68]:


market.reset_index()


# In[69]:


profit.head()


# In[70]:


final_df = market.merge(profit,on="id")


# In[71]:


final_df.head()


# In[72]:


bin_labels = ["less 50","more 50"]
final_df['quantile'] = pd.qcut(final_df['–ü—Ä–∏–±—ã–ª—å'], q=[0, .5 ,1],labels=bin_labels)


# In[73]:


high_profit = final_df[final_df['quantile'] == "more 50"]


# In[74]:


high_profit.head()


# In[75]:


class1_proba = np.array(model.predict_proba(X_train_trans)[:,1])
class1_proba


# In[76]:


df_class1 = pd.DataFrame(class1_proba)


# In[77]:


df_class1.head()


# In[78]:


y_train.reset_index(inplace=True)


# In[79]:


df_class1["index"] = df_class1.index


# In[80]:


df_class1.columns=["proba_1","index"]


# In[81]:


df_class1.head()


# In[82]:


y_train["index"] = y_train.index


# In[83]:


y_train.head()


# In[84]:


prob_data = y_train.merge(df_class1,on="index")


# In[85]:


prob_data.head()


# In[86]:


prob_data = prob_data.drop("index",axis=1)


# In[87]:


churn = prob_data[prob_data["proba_1"]>0.8]


# In[88]:


churn.head()


# In[89]:


churn = high_profit.merge(churn,on="id")


# In[90]:


churn.head()


# In[91]:


churn_table = churn[churn["–ü–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å_x"] == "–°–Ω–∏–∑–∏–ª–∞—Å—å"]


# In[92]:


retain = prob_data[prob_data["proba_1"]<0.1]


# In[93]:


retain = high_profit.merge(retain,on="id")


# In[94]:


retain_table = retain[retain["–ü–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å_x"] == "–ü—Ä–µ–∂–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å"]


# In[95]:


retain_table.head()


# In[96]:


for cat in ['–¢–∏–ø —Å–µ—Ä–≤–∏—Å–∞','–†–∞–∑—Ä–µ—à–∏—Ç—å —Å–æ–æ–±—â–∞—Ç—å','–ü–æ–ø—É–ª—è—Ä–Ω–∞—è_–∫–∞—Ç–µ–≥–æ—Ä–∏—è']:
    churn_table[cat].value_counts(normalize=True).plot(kind="pie",autopct='%.2f',title="–°–Ω–∏–∑–∏–ª—Å—è",figsize=(5,5));
    plt.show();
    retain_table[cat].value_counts(normalize=True).plot(kind="pie",autopct='%.2f',title="–ü—Ä–µ–∂–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å",figsize=(5,5));
    plt.show();
    


# In[97]:


churn_num = churn.select_dtypes(include=["float64","int64"])


# In[98]:


churn_num


# In[99]:


h =["–ê–∫—Ü–∏–æ–Ω–Ω—ã–µ_–ø–æ–∫—É–ø–∫–∏","–°—Ç—Ä–∞–Ω–∏—Ü_–∑–∞_–≤–∏–∑–∏—Ç", "–ú–∏–Ω—É—Ç—ã_–ø—Ä–µ–¥—ã–¥—É—â–∏–π_–º–µ—Å—è—Ü", "–ú–∏–Ω—É—Ç—ã_—Ç–µ–∫—É—â–∏–π_–º–µ—Å—è—Ü", "–ú–∞—Ä–∫–µ—Ç_–∞–∫—Ç–∏–≤_6_–º–µ—Å", "–°—Ä–µ–¥–Ω–∏–π_–ø—Ä–æ—Å–º–æ—Ç—Ä_–∫–∞—Ç–µ–≥–æ—Ä–∏–π_–∑–∞_–≤–∏–∑–∏—Ç", "–í—ã—Ä—É—á–∫–∞_–ø—Ä–µ–ø—Ä–µ–¥—ã–¥—É—â–∏–π_–º–µ—Å—è—Ü","–ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ_–ø—Ä–æ–¥—É–∫—Ç—ã_—à—Ç—É–∫_–∫–≤–∞—Ä—Ç–∞–ª","–ü—Ä–∏–±—ã–ª—å"]
for a in retain_table.columns:
    if a in(h):
         churn_table[a,"cat"] = pd.cut(churn_table[a], bins=3)
         retain_table[a,"cat"] = pd.cut(retain_table[a], bins=3)


# In[100]:


for c in h:
    churn_table[c,"cat"].value_counts(normalize=True).plot(kind="pie",autopct='%.2f',title="–°–Ω–∏–∑–∏–ª—Å—è",figsize=(5,5));
    plt.show();
    retain_table[c,"cat"].value_counts(normalize=True).plot(kind="pie",autopct='%.2f',title="–ü—Ä–µ–∂–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å",figsize=(5,5));
    plt.show();
    


# –í—ã–≤–æ–¥—ã: 
# 1. –£ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã –º–µ–Ω—å—à–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–æ–π: 67%, —É –≥—Ä—É–ø–ø—ã —Å –ø—Ä–µ–∂–Ω–∏–º —É—Ä–æ–≤–Ω–µ–º - 75%
# 
# 2. –°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: —Ç–æ–≤–∞—Ä—ã –¥–ª—è –¥–µ—Ç–µ–π, –∫–æ—Å–º–µ—Ç–∏–∫–∞ –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã,–¥–æ–º–∞—à–Ω–∏–π —Ç–µ–∫—Å—Ç–∏–ª—å. –£ –≤—Ç–æ—Ä–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞ —ç—Ç–æ –ú–µ–ª–∫–∞—è –±—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ –∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞, —Ç–æ–≤–∞—Ä—ã –¥–ª—è –¥–µ—Ç–µ–π –∏ –¥–æ–º–∞—à–Ω–∏–π —Ç–µ–∫—Å—Ç–∏–ª—å
# 
# 3. –¶–µ–ª–µ–≤–∞—è –≥—Ä—É–ø–ø–∞ –æ—Ö–æ—Ç–Ω–µ–µ –ø–æ–∫—É–ø–∞–µ—Ç –ø–æ –∞–∫—Ü–∏—è–º: 33% –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 0.7 - 0.9 –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å 1% —É –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ –≤—Ç–æ—Ä–æ–π –≥—Ä—É–ø–ø–µ.
# 
# 4. 80% –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π —Ü–µ–ª–µ–≤–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç –æ—Ç 1 –¥–æ 5 —Å—Ç—Ä–∞–Ω–∏—Ü, 20% - –æ—Ç 5 –¥–æ 9 —Å—Ç—Ä–∞–Ω–∏—Ü, —É –≤—Ç–æ—Ä–æ–π –≥—Ä—É–ø–ø—ã 40% - –æ—Ç 9 –¥–æ 14 —Å—Ç—Ä–∞–Ω–∏—Ü, 17% - –æ—Ç 14 –¥–æ 19, 43% –æ—Ç 4 –¥–æ 9.
# 
# 5. –¶–µ–ª–µ–≤–æ–π —Å–µ–≥–º–µ–Ω—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –º–µ–Ω—å—à–µ —Å—Ç—Ä–∞–Ω–∏—Ü. –ú–∏–Ω—É—Ç—ã –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü: –≤ —Ü–µ–ª–µ–≤–æ–º —Å–µ–≥–º–µ–Ω—Ç–µ - 45% –æ—Ç 8 –¥–æ 11 –º–∏–Ω—É—Ç, 35% - 5 –¥–æ 8 –º–∏–Ω—É—Ç, 20% –æ—Ç 11 –¥–æ 14 –º–∏–Ω—É—Ç. –í–æ –≤—Ç–æ—Ä–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 54% - 11-17 –º–∏–Ω—É—Ç, 34 % - 17-23 –º–∏–Ω—É—Ç, 12 % - 5-11 –º–∏–Ω—É—Ç.
# 
# 6. –í —Ü–µ–ª–µ–≤–æ–º —Å–µ–≥–º–µ–Ω—Ç–µ 30% - –ø—Ä–æ–≤–µ–ª–∏ –æ—Ç 3 –¥–æ 8 –º–∏–Ω—É—Ç –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ, 60 % –æ—Ç 8 –¥–æ 12 –º–∏–Ω—É—Ç, –≤–æ –≤—Ç–æ—Ä–æ–º - 53 % - 12-17 –º–∏–Ω—É—Ç, –∞ 33% –æ—Ç 17 –¥–æ 23 –º–∏–Ω—É—Ç.
# 
# 
# 7. –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∏–∂–µ –≤ —Ü–µ–ª–µ–≤–æ–º —Å–µ–≥–º–µ–Ω—Ç–µ: 52 % - –æ—Ç 2 –¥–æ 4 –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π, 29% - –æ—Ç 4 –¥–æ 6, 19% - 0.8-2.5, –≤–æ –≤—Ç–æ—Ä–æ–π –≥—Ä—É–ø–ø–µ: 40% - –æ—Ç 4 –¥–æ 5 –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π, 40% - –æ—Ç 3 –¥–æ 4, 25% - 5.4 –¥–æ 7.
# 
# 8. –¶–µ–ª–µ–≤–∞—è –≥—Ä—É–ø–ø–∞ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –º–µ–Ω—å—à–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞ –≤–∏–∑–∏—Ç: 71% - –æ—Ç 1 –¥–æ 3, 26% - –æ—Ç 3 –¥–æ 4. –í—Ç–æ—Ä–∞—è –≥—Ä—É–ø–ø–∞: 52% - –æ—Ç 3 –¥–æ 4, 40% - —Ç–æ 4 –¥–æ 6. 
# 
# 9. –£ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã –±–æ–ª—å—à–µ –Ω–µ–¥–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: 45% 3-6 —Ç–æ–≤–∞—Ä–∞, 38% - –æ—Ç 1 –¥–æ 3, 17% –æ—Ç 6 –¥–æ 10. –í—Ç–æ—Ä–∞—è –≥—Ä—É–ø–ø–∞: 46% - 1 —Ç–æ–≤–∞—Ä, 44% –æ—Ç 2  –¥–æ 3, 9% –æ—Ç 3 –¥–æ 5.
# 
# 10. –£ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã —É 80% –ø—Ä–∏–±—ã–ª—å 4-5.1 —Ç—ã—Å, 16% - 5.1-6.3 —Ç—ã—Å, 3% - 6.3-7.4. –£ –≤—Ç–æ—Ä–æ–π: 58% 4-4-9 —Ç—ã—Å, 34% 4.9-5-8 —Ç—ã—Å, 8% 5.8-6.8 —Ç—ã—Å.
# 

# –ö–ª–∏–µ–Ω—Ç—ã —Å–æ —Å–Ω–∏–∑–∏–≤—à–µ–π—Å—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –æ—Ö–æ—Ç–Ω–µ–µ –ø–æ–ª—å–∑—É—é—Ç—Å—è –∞–∫—Ü–∏—è–º–∏, —É –Ω–∏—Ö —Ç–∞–∫–∂–µ –±–æ–ª—å—à–µ –Ω–µ–¥–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ. –ú–æ–∂–Ω–æ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Ç–∞–∫–∏–º –∫–ª–∏–µ–Ω—Ç–∞–º –∞–∫—Ü–∏–∏ –Ω–∞ –ª—é–±–∏–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Ç–æ–≤–∞—Ä—ã –¥–ª—è –¥–µ—Ç–µ–π, –∫–æ—Å–º–µ—Ç–∏–∫–∞ –∏ –∞–∫—Å–µ—Å—É–∞—Ä—ã,–¥–æ–º–∞—à–Ω–∏–π —Ç–µ–∫—Å—Ç–∏–ª—å) –∏ –Ω–∞ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ. –°—Ç–æ–∏—Ç —Ç–∞–∫–∂–µ –∞–∫—Ç–∏–≤–Ω–µ–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞–º —Ç–æ–≤–∞—Ä—ã (–≤–æ–∑–º–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–ª–∫–∞—è –±—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞,—Ç–∫ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∞–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç—ã –ø–æ–∫—É–ø–∞—é—â–∏–µ —Ç–∞–∫–∏–µ —Ç–æ–≤–∞—Ä—ã —á–∞—â–µ –≤–µ—Ä–æ—è—Ç–Ω–µ–µ –æ—Å—Ç–∞–Ω—É—Ç—Å—è –∫–ª–∏–µ–Ω—Ç–∞–º–∏ —Å–µ—Ä–≤–∏—Å–∞), —á—Ç–æ–±—ã –æ–Ω–∏ –ø—Ä–æ–≤–æ–¥–∏–ª–∏ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Å–∞–π—Ç–µ –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–ª–∏ –±–æ–ª—å—à–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞ –≤–∏–∑–∏—Ç.

# –í—ã–≤–æ–¥: –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö, –∏ –Ω–∞–π–¥–µ–Ω–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ —Ç–∞–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: —Ç–∞–∫ –∫–∞–∫ –ø–µ—Ä–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –∞–∫—Ç–∏–≤–Ω–µ–µ –ø–æ–∫—É–ø–∞–µ—Ç –ø–æ –∞–∫—Ü–∏—è–º, –º–æ–∂–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–º –∞–∫—Ü–∏–æ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ú–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–Ω–µ–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –∏–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –±–æ–ª—å—à–∏–º–∏ —Å–∫–∏–¥–∫–∞–º–∏, —Ç–µ–º —Å–∞–º—ã–º —Å—Ç–∏–º—É–ª–∏—Ä—É—è –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –∑–∞ –≤–∏–∑–∏—Ç –∏ –º–∏–Ω—É—Ç—ã –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –Ω–∞ —Å–∞–π—Ç–µ.
